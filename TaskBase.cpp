#include "pch.h"



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <summary>
//  Method: Adjust.
// </summary>
// <param name="delta">  The delta.</param>
// <returns>
//  True if successful
// </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Task::Adjust(int32_t& delta)
{
	auto v = ms();
	if (v < delta)
	{
		v = 0;
		delta -= v;
		ms(v);
		return false;
	}

	delta -= v;
	ms(0);

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <summary>
//  Method: Subtract.
// </summary>
// <param name="delayTime">  The delay Time.</param>
// <returns>
//  True if successful
// </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Task::Subtract(int32_t& delayTime)
{
	auto v = ms();
	if (delayTime > v)
	{
		delayTime -= v;
		return false;
	}

	ms(v - delayTime);

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <summary>
//  Method: Set.
// </summary>
// <param name="prev">  The previous.</param>
// <param name="next">  The next.</param>
// <param name="fun">   The fun.</param>
// <param name="ms">    The milliseconds.</param>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Task::Set(byte prev, byte next, TaskFun fun, int32_t ms)
{
	d1 = (next << V_SHIFT) | (ms & V_MASK);
	d2 = (prev << V_SHIFT) | (((int32_t)fun) & V_MASK); // note: limits the ptr to V_MASK range 24 bits is 16M
}

